syntax = "proto3";
package database;
option go_package = "github.com/JanMeckelholt/running/common/grpc/database";
import "google/protobuf/empty.proto";
import "strava/strava.proto";

service Database {
  rpc UpsertClient(Client) returns (google.protobuf.Empty) {}
  rpc UpdateClient(UpdateClientRequest) returns (Client) {}
  rpc GetClient(ClientId) returns (Client) {}
  rpc UpsertAthlete(Athlete) returns (google.protobuf.Empty) {}
  rpc UpdateAthlete(UpdateAthleteRequest) returns (Athlete) {}
  rpc GetAthlete(AthleteId) returns (Athlete) {}
  rpc UpsertActivity(strava.Activity) returns (google.protobuf.Empty) {}
  rpc UpsertActivityFromCSV(strava.Activity) returns (google.protobuf.Empty) {}
  rpc GetActivity(ActivityId) returns (strava.Activity) {}
  rpc GetActivities(ActivitiesRequest) returns (ActivitiesResponse) {}
}

message ActivitiesRequest {
  uint64 athleteId = 1;
  uint64 since = 2;
  uint64 until = 3;
}

message ActivitiesResponse {
  repeated strava.Activity Activities = 1;
}

message ClientId {
  string clientId =1;
}

message AthleteId {
  uint64 athleteId =1;
}

message ActivityId {
  string activityId =1;
}

message Client {
  string clientId = 1;
  string clientSecret = 2;
}

message Athlete {
  uint64 athleteId = 1;
  string clientId = 2;
  string token = 3;
  string refreshToken = 4;
  repeated strava.Activity Activities = 5;
}

message UpdateClientRequest {
  string clientId=1;
repeated kvPair kvPairs=2;
}

message UpdateAthleteRequest {
  uint64 athleteId=1;
repeated kvPair kvPairs=2;
}

message kvPair {
 string key = 1;
 string value =2;
}

message TokenResponse {
  oneof response {
    SuccessResponse success_response = 1;
    ErrorResponse error_response = 2;
  }
}

message SuccessResponse {
  string message =1;
}
message ErrorResponse {
  string error = 1;
}