// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: strava/strava.proto

package strava

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StravaClient is the client API for Strava service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StravaClient interface {
	GetRunner(ctx context.Context, in *RunnerRequest, opts ...grpc.CallOption) (*RunnerResponse, error)
	GetActivities(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*ActivitiesResponse, error)
	ActivitiesToDB(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UseRefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type stravaClient struct {
	cc grpc.ClientConnInterface
}

func NewStravaClient(cc grpc.ClientConnInterface) StravaClient {
	return &stravaClient{cc}
}

func (c *stravaClient) GetRunner(ctx context.Context, in *RunnerRequest, opts ...grpc.CallOption) (*RunnerResponse, error) {
	out := new(RunnerResponse)
	err := c.cc.Invoke(ctx, "/strava.Strava/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stravaClient) GetActivities(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*ActivitiesResponse, error) {
	out := new(ActivitiesResponse)
	err := c.cc.Invoke(ctx, "/strava.Strava/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stravaClient) ActivitiesToDB(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/strava.Strava/ActivitiesToDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stravaClient) UseRefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/strava.Strava/UseRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StravaServer is the server API for Strava service.
// All implementations must embed UnimplementedStravaServer
// for forward compatibility
type StravaServer interface {
	GetRunner(context.Context, *RunnerRequest) (*RunnerResponse, error)
	GetActivities(context.Context, *ActivitiesRequest) (*ActivitiesResponse, error)
	ActivitiesToDB(context.Context, *ActivitiesRequest) (*empty.Empty, error)
	UseRefreshToken(context.Context, *RefreshRequest) (*TokenResponse, error)
	mustEmbedUnimplementedStravaServer()
}

// UnimplementedStravaServer must be embedded to have forward compatible implementations.
type UnimplementedStravaServer struct {
}

func (UnimplementedStravaServer) GetRunner(context.Context, *RunnerRequest) (*RunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedStravaServer) GetActivities(context.Context, *ActivitiesRequest) (*ActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedStravaServer) ActivitiesToDB(context.Context, *ActivitiesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivitiesToDB not implemented")
}
func (UnimplementedStravaServer) UseRefreshToken(context.Context, *RefreshRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseRefreshToken not implemented")
}
func (UnimplementedStravaServer) mustEmbedUnimplementedStravaServer() {}

// UnsafeStravaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StravaServer will
// result in compilation errors.
type UnsafeStravaServer interface {
	mustEmbedUnimplementedStravaServer()
}

func RegisterStravaServer(s grpc.ServiceRegistrar, srv StravaServer) {
	s.RegisterService(&Strava_ServiceDesc, srv)
}

func _Strava_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strava.Strava/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServer).GetRunner(ctx, req.(*RunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strava_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strava.Strava/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServer).GetActivities(ctx, req.(*ActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strava_ActivitiesToDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServer).ActivitiesToDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strava.Strava/ActivitiesToDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServer).ActivitiesToDB(ctx, req.(*ActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strava_UseRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StravaServer).UseRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/strava.Strava/UseRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StravaServer).UseRefreshToken(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Strava_ServiceDesc is the grpc.ServiceDesc for Strava service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strava_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "strava.Strava",
	HandlerType: (*StravaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunner",
			Handler:    _Strava_GetRunner_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _Strava_GetActivities_Handler,
		},
		{
			MethodName: "ActivitiesToDB",
			Handler:    _Strava_ActivitiesToDB_Handler,
		},
		{
			MethodName: "UseRefreshToken",
			Handler:    _Strava_UseRefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strava/strava.proto",
}
