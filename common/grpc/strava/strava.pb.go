// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: strava/strava.proto

package strava

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AthleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AthleteId uint64 `protobuf:"varint,1,opt,name=athleteId,proto3" json:"athleteId,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AthleteRequest) Reset() {
	*x = AthleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteRequest) ProtoMessage() {}

func (x *AthleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteRequest.ProtoReflect.Descriptor instead.
func (*AthleteRequest) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{0}
}

func (x *AthleteRequest) GetAthleteId() uint64 {
	if x != nil {
		return x.AthleteId
	}
	return 0
}

func (x *AthleteRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	RefresToken  string `protobuf:"bytes,3,opt,name=refresToken,proto3" json:"refresToken,omitempty"`
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{1}
}

func (x *RefreshRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RefreshRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *RefreshRequest) GetRefresToken() string {
	if x != nil {
		return x.RefresToken
	}
	return ""
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{2}
}

func (x *TokenResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AthleteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceState int64  `protobuf:"varint,2,opt,name=resource_state,json=resourceState,proto3" json:"resource_state,omitempty"`
}

func (x *AthleteType) Reset() {
	*x = AthleteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteType) ProtoMessage() {}

func (x *AthleteType) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteType.ProtoReflect.Descriptor instead.
func (*AthleteType) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{3}
}

func (x *AthleteType) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AthleteType) GetResourceState() int64 {
	if x != nil {
		return x.ResourceState
	}
	return 0
}

type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{4}
}

type AthleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string  `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	ResourceState uint64  `protobuf:"varint,3,opt,name=resource_state,json=resourceState,proto3" json:"resource_state,omitempty"`
	Firstname     string  `protobuf:"bytes,4,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname      string  `protobuf:"bytes,5,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Bio           string  `protobuf:"bytes,6,opt,name=bio,proto3" json:"bio,omitempty"`
	City          string  `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	State         string  `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Country       string  `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
	Sex           string  `protobuf:"bytes,10,opt,name=sex,proto3" json:"sex,omitempty"`
	Premium       bool    `protobuf:"varint,11,opt,name=premium,proto3" json:"premium,omitempty"`
	Summit        bool    `protobuf:"varint,12,opt,name=summit,proto3" json:"summit,omitempty"`
	CreatedAt     string  `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     string  `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	BadgeTypeId   uint64  `protobuf:"varint,15,opt,name=badge_type_id,json=badgeTypeId,proto3" json:"badge_type_id,omitempty"`
	Weight        float64 `protobuf:"fixed64,16,opt,name=weight,proto3" json:"weight,omitempty"`
	ProfileMedium string  `protobuf:"bytes,17,opt,name=profile_medium,json=profileMedium,proto3" json:"profile_medium,omitempty"`
	Profile       string  `protobuf:"bytes,18,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *AthleteResponse) Reset() {
	*x = AthleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AthleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AthleteResponse) ProtoMessage() {}

func (x *AthleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AthleteResponse.ProtoReflect.Descriptor instead.
func (*AthleteResponse) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{5}
}

func (x *AthleteResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AthleteResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AthleteResponse) GetResourceState() uint64 {
	if x != nil {
		return x.ResourceState
	}
	return 0
}

func (x *AthleteResponse) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *AthleteResponse) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *AthleteResponse) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *AthleteResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AthleteResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AthleteResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AthleteResponse) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *AthleteResponse) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *AthleteResponse) GetSummit() bool {
	if x != nil {
		return x.Summit
	}
	return false
}

func (x *AthleteResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AthleteResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *AthleteResponse) GetBadgeTypeId() uint64 {
	if x != nil {
		return x.BadgeTypeId
	}
	return 0
}

func (x *AthleteResponse) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AthleteResponse) GetProfileMedium() string {
	if x != nil {
		return x.ProfileMedium
	}
	return ""
}

func (x *AthleteResponse) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type ActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AthleteId uint64 `protobuf:"varint,1,opt,name=athleteId,proto3" json:"athleteId,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ActivityRequest) Reset() {
	*x = ActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRequest) ProtoMessage() {}

func (x *ActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRequest.ProtoReflect.Descriptor instead.
func (*ActivityRequest) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{6}
}

func (x *ActivityRequest) GetAthleteId() uint64 {
	if x != nil {
		return x.AthleteId
	}
	return 0
}

func (x *ActivityRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AthleteId uint64 `protobuf:"varint,1,opt,name=athleteId,proto3" json:"athleteId,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Since     uint64 `protobuf:"varint,3,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *ActivitiesRequest) Reset() {
	*x = ActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitiesRequest) ProtoMessage() {}

func (x *ActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitiesRequest.ProtoReflect.Descriptor instead.
func (*ActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{7}
}

func (x *ActivitiesRequest) GetAthleteId() uint64 {
	if x != nil {
		return x.AthleteId
	}
	return 0
}

func (x *ActivitiesRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ActivitiesRequest) GetSince() uint64 {
	if x != nil {
		return x.Since
	}
	return 0
}

type ActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activities []*Activity `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *ActivitiesResponse) Reset() {
	*x = ActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivitiesResponse) ProtoMessage() {}

func (x *ActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivitiesResponse.ProtoReflect.Descriptor instead.
func (*ActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{8}
}

func (x *ActivitiesResponse) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceState      uint64       `protobuf:"varint,1,opt,name=resource_state,json=resourceState,proto3" json:"resource_state,omitempty"`
	Athlete            *AthleteType `protobuf:"bytes,2,opt,name=athlete,proto3" json:"athlete,omitempty"`
	Name               string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Distance           float64      `protobuf:"fixed64,4,opt,name=distance,proto3" json:"distance,omitempty"`
	MovingTime         uint64       `protobuf:"varint,5,opt,name=moving_time,json=movingTime,proto3" json:"moving_time,omitempty"`
	ElapsedTime        uint64       `protobuf:"varint,6,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	TotalElevationGain float64      `protobuf:"fixed64,7,opt,name=total_elevation_gain,json=totalElevationGain,proto3" json:"total_elevation_gain,omitempty"`
	Type               string       `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	SportType          string       `protobuf:"bytes,9,opt,name=sport_type,json=sportType,proto3" json:"sport_type,omitempty"`
	Id                 uint64       `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
	StartDate          string       `protobuf:"bytes,11,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	StartDateLocale    string       `protobuf:"bytes,12,opt,name=start_date_locale,json=startDateLocale,proto3" json:"start_date_locale,omitempty"`
	Timezone           string       `protobuf:"bytes,13,opt,name=timezone,proto3" json:"timezone,omitempty"`
	UtcOffset          float64      `protobuf:"fixed64,14,opt,name=utc_offset,json=utcOffset,proto3" json:"utc_offset,omitempty"`
	LocationCity       string       `protobuf:"bytes,15,opt,name=location_city,json=locationCity,proto3" json:"location_city,omitempty"`
	LocationState      string       `protobuf:"bytes,16,opt,name=location_state,json=locationState,proto3" json:"location_state,omitempty"`
	LocationCountry    string       `protobuf:"bytes,17,opt,name=location_country,json=locationCountry,proto3" json:"location_country,omitempty"`
	AchievementCount   uint64       `protobuf:"varint,18,opt,name=achievement_count,json=achievementCount,proto3" json:"achievement_count,omitempty"`
	KudosCount         uint64       `protobuf:"varint,19,opt,name=kudos_count,json=kudosCount,proto3" json:"kudos_count,omitempty"`
	CommentCount       uint64       `protobuf:"varint,20,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	Manual             bool         `protobuf:"varint,21,opt,name=manual,proto3" json:"manual,omitempty"`
	Visibility         string       `protobuf:"bytes,22,opt,name=visibility,proto3" json:"visibility,omitempty"`
	StartLatlng        []float64    `protobuf:"fixed64,23,rep,packed,name=start_latlng,json=startLatlng,proto3" json:"start_latlng,omitempty"`
	EndLatlng          []float64    `protobuf:"fixed64,24,rep,packed,name=end_latlng,json=endLatlng,proto3" json:"end_latlng,omitempty"`
	AverageSpeed       float64      `protobuf:"fixed64,25,opt,name=average_speed,json=averageSpeed,proto3" json:"average_speed,omitempty"`
	MaxSpeed           float64      `protobuf:"fixed64,26,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	AverageHeartrate   float64      `protobuf:"fixed64,27,opt,name=average_heartrate,json=averageHeartrate,proto3" json:"average_heartrate,omitempty"`
	MaxHeartrate       float64      `protobuf:"fixed64,28,opt,name=max_heartrate,json=maxHeartrate,proto3" json:"max_heartrate,omitempty"`
	ElevHigh           float64      `protobuf:"fixed64,29,opt,name=elev_high,json=elevHigh,proto3" json:"elev_high,omitempty"`
	ElevLow            float64      `protobuf:"fixed64,30,opt,name=elev_low,json=elevLow,proto3" json:"elev_low,omitempty"`
	StartDateUnix      uint64       `protobuf:"varint,40,opt,name=start_date_unix,json=startDateUnix,proto3" json:"start_date_unix,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strava_strava_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_strava_strava_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_strava_strava_proto_rawDescGZIP(), []int{9}
}

func (x *Activity) GetResourceState() uint64 {
	if x != nil {
		return x.ResourceState
	}
	return 0
}

func (x *Activity) GetAthlete() *AthleteType {
	if x != nil {
		return x.Athlete
	}
	return nil
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Activity) GetMovingTime() uint64 {
	if x != nil {
		return x.MovingTime
	}
	return 0
}

func (x *Activity) GetElapsedTime() uint64 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *Activity) GetTotalElevationGain() float64 {
	if x != nil {
		return x.TotalElevationGain
	}
	return 0
}

func (x *Activity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Activity) GetSportType() string {
	if x != nil {
		return x.SportType
	}
	return ""
}

func (x *Activity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Activity) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Activity) GetStartDateLocale() string {
	if x != nil {
		return x.StartDateLocale
	}
	return ""
}

func (x *Activity) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Activity) GetUtcOffset() float64 {
	if x != nil {
		return x.UtcOffset
	}
	return 0
}

func (x *Activity) GetLocationCity() string {
	if x != nil {
		return x.LocationCity
	}
	return ""
}

func (x *Activity) GetLocationState() string {
	if x != nil {
		return x.LocationState
	}
	return ""
}

func (x *Activity) GetLocationCountry() string {
	if x != nil {
		return x.LocationCountry
	}
	return ""
}

func (x *Activity) GetAchievementCount() uint64 {
	if x != nil {
		return x.AchievementCount
	}
	return 0
}

func (x *Activity) GetKudosCount() uint64 {
	if x != nil {
		return x.KudosCount
	}
	return 0
}

func (x *Activity) GetCommentCount() uint64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Activity) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Activity) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Activity) GetStartLatlng() []float64 {
	if x != nil {
		return x.StartLatlng
	}
	return nil
}

func (x *Activity) GetEndLatlng() []float64 {
	if x != nil {
		return x.EndLatlng
	}
	return nil
}

func (x *Activity) GetAverageSpeed() float64 {
	if x != nil {
		return x.AverageSpeed
	}
	return 0
}

func (x *Activity) GetMaxSpeed() float64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *Activity) GetAverageHeartrate() float64 {
	if x != nil {
		return x.AverageHeartrate
	}
	return 0
}

func (x *Activity) GetMaxHeartrate() float64 {
	if x != nil {
		return x.MaxHeartrate
	}
	return 0
}

func (x *Activity) GetElevHigh() float64 {
	if x != nil {
		return x.ElevHigh
	}
	return 0
}

func (x *Activity) GetElevLow() float64 {
	if x != nil {
		return x.ElevLow
	}
	return 0
}

func (x *Activity) GetStartDateUnix() uint64 {
	if x != nil {
		return x.StartDateUnix
	}
	return 0
}

var File_strava_strava_proto protoreflect.FileDescriptor

var file_strava_strava_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x72, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x0b, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0c, 0x0a,
	0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x0f,
	0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5d, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xa7, 0x08, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x61, 0x74,
	0x68, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x64, 0x6f, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6b, 0x75, 0x64, 0x6f,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x74,
	0x6c, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x61,
	0x74, 0x6c, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4c,
	0x61, 0x74, 0x6c, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6c, 0x65,
	0x76, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6c,
	0x65, 0x76, 0x48, 0x69, 0x67, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x76, 0x5f, 0x6c,
	0x6f, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x76, 0x4c, 0x6f,
	0x77, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x32, 0x9e, 0x02, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x61, 0x76, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x74, 0x68, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x41, 0x74, 0x68, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x76, 0x61, 0x2e, 0x41, 0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x44,
	0x42, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61,
	0x76, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x61, 0x6e, 0x4d, 0x65, 0x63, 0x6b,
	0x65, 0x6c, 0x68, 0x6f, 0x6c, 0x74, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strava_strava_proto_rawDescOnce sync.Once
	file_strava_strava_proto_rawDescData = file_strava_strava_proto_rawDesc
)

func file_strava_strava_proto_rawDescGZIP() []byte {
	file_strava_strava_proto_rawDescOnce.Do(func() {
		file_strava_strava_proto_rawDescData = protoimpl.X.CompressGZIP(file_strava_strava_proto_rawDescData)
	})
	return file_strava_strava_proto_rawDescData
}

var file_strava_strava_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_strava_strava_proto_goTypes = []interface{}{
	(*AthleteRequest)(nil),     // 0: strava.AthleteRequest
	(*RefreshRequest)(nil),     // 1: strava.RefreshRequest
	(*TokenResponse)(nil),      // 2: strava.TokenResponse
	(*AthleteType)(nil),        // 3: strava.athleteType
	(*Coordinate)(nil),         // 4: strava.coordinate
	(*AthleteResponse)(nil),    // 5: strava.AthleteResponse
	(*ActivityRequest)(nil),    // 6: strava.ActivityRequest
	(*ActivitiesRequest)(nil),  // 7: strava.ActivitiesRequest
	(*ActivitiesResponse)(nil), // 8: strava.ActivitiesResponse
	(*Activity)(nil),           // 9: strava.Activity
	(*empty.Empty)(nil),        // 10: google.protobuf.Empty
}
var file_strava_strava_proto_depIdxs = []int32{
	9,  // 0: strava.ActivitiesResponse.activities:type_name -> strava.Activity
	3,  // 1: strava.Activity.athlete:type_name -> strava.athleteType
	0,  // 2: strava.Strava.GetAthlete:input_type -> strava.AthleteRequest
	7,  // 3: strava.Strava.GetActivities:input_type -> strava.ActivitiesRequest
	7,  // 4: strava.Strava.ActivitiesToDB:input_type -> strava.ActivitiesRequest
	1,  // 5: strava.Strava.UseRefreshToken:input_type -> strava.RefreshRequest
	5,  // 6: strava.Strava.GetAthlete:output_type -> strava.AthleteResponse
	8,  // 7: strava.Strava.GetActivities:output_type -> strava.ActivitiesResponse
	10, // 8: strava.Strava.ActivitiesToDB:output_type -> google.protobuf.Empty
	2,  // 9: strava.Strava.UseRefreshToken:output_type -> strava.TokenResponse
	6,  // [6:10] is the sub-list for method output_type
	2,  // [2:6] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_strava_strava_proto_init() }
func file_strava_strava_proto_init() {
	if File_strava_strava_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strava_strava_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AthleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strava_strava_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strava_strava_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_strava_strava_proto_goTypes,
		DependencyIndexes: file_strava_strava_proto_depIdxs,
		MessageInfos:      file_strava_strava_proto_msgTypes,
	}.Build()
	File_strava_strava_proto = out.File
	file_strava_strava_proto_rawDesc = nil
	file_strava_strava_proto_goTypes = nil
	file_strava_strava_proto_depIdxs = nil
}
