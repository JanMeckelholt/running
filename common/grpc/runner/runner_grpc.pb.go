// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: runner/runner.proto

package runner

import (
	context "context"
	database "github.com/JanMeckelholt/running/common/grpc/database"
	strava "github.com/JanMeckelholt/running/common/grpc/strava"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	GetRunner(ctx context.Context, in *RunnerRequest, opts ...grpc.CallOption) (*strava.RunnerResponse, error)
	CreateClient(ctx context.Context, in *database.Client, opts ...grpc.CallOption) (*empty.Empty, error)
	GetActivities(ctx context.Context, in *database.ActivitiesRequest, opts ...grpc.CallOption) (*database.ActivitiesResponse, error)
	ActivitiesToDB(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetWeekSummaries(ctx context.Context, in *WeekSummariesRequest, opts ...grpc.CallOption) (*WeekSummariesResponse, error)
	Health(ctx context.Context, in *HealthMessage, opts ...grpc.CallOption) (*HealthMessage, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) GetRunner(ctx context.Context, in *RunnerRequest, opts ...grpc.CallOption) (*strava.RunnerResponse, error) {
	out := new(strava.RunnerResponse)
	err := c.cc.Invoke(ctx, "/runner.Runner/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateClient(ctx context.Context, in *database.Client, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/runner.Runner/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetActivities(ctx context.Context, in *database.ActivitiesRequest, opts ...grpc.CallOption) (*database.ActivitiesResponse, error) {
	out := new(database.ActivitiesResponse)
	err := c.cc.Invoke(ctx, "/runner.Runner/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ActivitiesToDB(ctx context.Context, in *ActivitiesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/runner.Runner/ActivitiesToDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetWeekSummaries(ctx context.Context, in *WeekSummariesRequest, opts ...grpc.CallOption) (*WeekSummariesResponse, error) {
	out := new(WeekSummariesResponse)
	err := c.cc.Invoke(ctx, "/runner.Runner/GetWeekSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Health(ctx context.Context, in *HealthMessage, opts ...grpc.CallOption) (*HealthMessage, error) {
	out := new(HealthMessage)
	err := c.cc.Invoke(ctx, "/runner.Runner/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility
type RunnerServer interface {
	GetRunner(context.Context, *RunnerRequest) (*strava.RunnerResponse, error)
	CreateClient(context.Context, *database.Client) (*empty.Empty, error)
	GetActivities(context.Context, *database.ActivitiesRequest) (*database.ActivitiesResponse, error)
	ActivitiesToDB(context.Context, *ActivitiesRequest) (*empty.Empty, error)
	GetWeekSummaries(context.Context, *WeekSummariesRequest) (*WeekSummariesResponse, error)
	Health(context.Context, *HealthMessage) (*HealthMessage, error)
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (UnimplementedRunnerServer) GetRunner(context.Context, *RunnerRequest) (*strava.RunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedRunnerServer) CreateClient(context.Context, *database.Client) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedRunnerServer) GetActivities(context.Context, *database.ActivitiesRequest) (*database.ActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedRunnerServer) ActivitiesToDB(context.Context, *ActivitiesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivitiesToDB not implemented")
}
func (UnimplementedRunnerServer) GetWeekSummaries(context.Context, *WeekSummariesRequest) (*WeekSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekSummaries not implemented")
}
func (UnimplementedRunnerServer) Health(context.Context, *HealthMessage) (*HealthMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetRunner(ctx, req.(*RunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(database.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateClient(ctx, req.(*database.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(database.ActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetActivities(ctx, req.(*database.ActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ActivitiesToDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ActivitiesToDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/ActivitiesToDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ActivitiesToDB(ctx, req.(*ActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetWeekSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeekSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetWeekSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/GetWeekSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetWeekSummaries(ctx, req.(*WeekSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runner.Runner/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Health(ctx, req.(*HealthMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunner",
			Handler:    _Runner_GetRunner_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _Runner_CreateClient_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _Runner_GetActivities_Handler,
		},
		{
			MethodName: "ActivitiesToDB",
			Handler:    _Runner_ActivitiesToDB_Handler,
		},
		{
			MethodName: "GetWeekSummaries",
			Handler:    _Runner_GetWeekSummaries_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Runner_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner/runner.proto",
}
